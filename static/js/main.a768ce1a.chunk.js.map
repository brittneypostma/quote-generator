{"version":3,"sources":["components/Quote.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateQuote","chosenQuote","quotes","state","apiResult","randomNumber","Math","floor","random","length","forEach","element","index","push","setState","text","quote","author","isLoaded","bgColor","clickCount","handleClick","bind","assertThisInitialized","_this2","fetch","headers","Accept","then","response","json","responseData","quotesArrayLength","catch","error","react_default","a","createElement","id","onClick","href","concat","className","title","target","rel","alt","src","Component","Card","src_components_Quote","App","components_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAoGeA,qBAhGX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmCRQ,cAAgB,WACd,IAAMC,EAAc,GACdC,EAAST,EAAKU,MAAMC,UACtBC,EAAeC,KAAKC,MAAOD,KAAKE,SAAWf,EAAKU,MAAMC,UAAUK,OAAU,GAE9EP,EAAOQ,QAAQ,SAASC,EAASC,GAC5BA,IAAUP,GACXJ,EAAYY,KAAKF,KAGrBlB,EAAKqB,SAAS,CACZC,KAAKd,EAAY,GAAGe,MACpBC,OAAOhB,EAAY,GAAGgB,UA9CxBxB,EAAKU,MAAQ,CACXC,UAAW,KACXa,OAAQ,GACRF,KAAM,GACNG,UAAU,EACVC,QAAS,UACTC,WAAY,GAEd3B,EAAK4B,YAAc5B,EAAK4B,YAAYC,KAAjB5B,OAAA6B,EAAA,EAAA7B,CAAAD,IAVJA,6EAcfG,KAAKI,4DAGa,IAAAwB,EAAA5B,KAClB6B,MAAM,yIAA0I,CAC9IC,QAAS,CACPC,OAAQ,sBAGXC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACG,GACLP,EAAKV,SAAS,CACZV,UAAW2B,EAAa7B,OACxBgB,UAAU,EACVD,OAAQc,EAAa7B,OAAO,GAAGe,OAC/BF,KAAMgB,EAAa7B,OAAO,GAAGc,MAC7BgB,kBAAmBD,EAAa7B,OAAOO,WAG1CwB,MAAM,SAAAC,GAAK,OAAIV,EAAKV,SAAS,CAAEoB,6CAoBpC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACRH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,cAAYC,GAAG,QAAf,IAAwB1C,KAAKO,MAAMY,KAAnC,KACAoB,EAAAC,EAAAC,cAAA,KAAGC,GAAG,UAAN,KAAkB1C,KAAKO,MAAMc,QAC7BkB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACJH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYC,QAAS3C,KAAKyB,aAArC,aAKAc,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SACRH,EAAAC,EAAAC,cAAA,KACAG,KAAI,kCAAAC,OAAoC7C,KAAKO,MAAMY,KAA/C,MAAA0B,OAAwD7C,KAAKO,MAAMc,QACvEyB,UAAU,SACVJ,GAAG,cACHK,MAAM,oBACNC,OAAO,SACPC,IAAI,uBAEJV,EAAAC,EAAAC,cAAA,OAAKS,IAAI,UAAUR,GAAG,UAAUS,IAAI,yEAE5BZ,EAAAC,EAAAC,cAAA,KACAG,KAAI,kCAAAC,OAAoC7C,KAAKO,MAAMY,KAA/C,MAAA0B,OAAwD7C,KAAKO,MAAMc,QACvEyB,UAAU,SACVJ,GAAG,cACHK,MAAM,oBACNC,OAAO,SACPC,IAAI,uBAIJV,EAAAC,EAAAC,cAAA,UAAQC,GAAG,aAAX,iCAtFAU,cCQLC,EARF,WACT,OACId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACa,EAAD,QCMGC,SARH,WACV,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAACe,EAAD,SCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACDxB,EAAAC,EAAAC,cAACuB,EAAD,MACHC,SAASC,eAAe,SDyHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.a768ce1a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './Quote.css'\r\n\r\nclass Quote extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          apiResult: null,\r\n          author: '',\r\n          text: '',\r\n          isLoaded: false,\r\n          bgColor: '#f99192',\r\n          clickCount: 0,\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    \r\n      handleClick() {\r\n        this.generateQuote();\r\n      }\r\n    \r\n      componentDidMount() {\r\n        fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json', {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n          }\r\n        })\r\n        .then(response => response.json())\r\n        .then((responseData) => {\r\n          this.setState({\r\n            apiResult: responseData.quotes,\r\n            isLoaded: true,\r\n            author: responseData.quotes[0].author,\r\n            text: responseData.quotes[0].quote,\r\n            quotesArrayLength: responseData.quotes.length,\r\n          });\r\n        })\r\n        .catch(error => this.setState({ error }));\r\n      }\r\n    \r\n      generateQuote = () => {\r\n        const chosenQuote = [];\r\n        const quotes = this.state.apiResult;\r\n        let randomNumber = Math.floor((Math.random() * this.state.apiResult.length) + 1);\r\n    \r\n        quotes.forEach(function(element, index) {\r\n          if(index === randomNumber) {\r\n            chosenQuote.push(element)\r\n          }\r\n        })\r\n        this.setState({\r\n          text:chosenQuote[0].quote,\r\n          author:chosenQuote[0].author,\r\n        })\r\n      }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"quote-box\">\r\n      <div id=\"grid\">\r\n        <blockquote id=\"text\">\"{this.state.text}\"</blockquote>\r\n        <p id=\"author\">- {this.state.author}</p>\r\n        <div id=\"buttons\">\r\n            <button id=\"new-quote\" onClick={this.handleClick}>\r\n            New Quote\r\n            </button>\r\n            \r\n            \r\n            <div id=\"tweet\">\r\n            <a\r\n            href={`https://twitter.com/share?text=${this.state.text}- ${this.state.author}`}\r\n            className=\"button\"\r\n            id=\"tweet-quote\"\r\n            title=\"Tweet this quote!\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            >\r\n            <img alt=\"twitter\" id=\"twitter\" src=\"https://www.stickpng.com/assets/images/580b57fcd9996e24bc43c53e.png\"></img>\r\n            </a>      \r\n                    <a\r\n                    href={`https://twitter.com/share?text=${this.state.text}- ${this.state.author}`}\r\n                    className=\"button\"\r\n                    id=\"tweet-quote\"\r\n                    title=\"Tweet this quote!\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    >\r\n                    \r\n                    \r\n                    <button id=\"new-quote\">Tweet this quote!</button>\r\n                        \r\n                    </a>\r\n                </div>    \r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quote;\r\n","import React from 'react'\r\nimport Quote from './Quote'\r\n\r\nconst Card = () => {\r\n    return (\r\n        <div>\r\n            <Quote />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\nimport Card from './components/Card'\nimport './App.css'\n\nconst App = () => {\n  return(\n    <div id=\"wrapper\">\n      <Card />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n        <App />\n   , document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}